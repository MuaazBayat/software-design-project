name: 🐳 Messaging Service - Docker Build & Push

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'services/messaging/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'services/messaging/**'

jobs:
  tests:
    name: ✅ Tests (Messaging)
    runs-on: ubuntu-22.04

    env:
      # Prevent import guard from failing during test collection
      SUPABASE_URL: http://dummy
      SUPABASE_KEY: dummy
      # Optional: quiet Pydantic/Supabase warnings in CI logs
      PYTHONWARNINGS: default

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ steps.setup-python.outputs.python-version || '3.12' }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ steps.setup-python.outputs.python-version || '3.12' }}-

      - name: Install deps
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # If you're using pyproject.toml / poetry / uv, swap the installer here

      - name: Run tests with coverage
        run: |
          pytest --maxfail=1 -q --cov=services --cov-report=term-missing --cov-report=xml
          # Enforce a coverage floor; adjust as you like:
          pytest --maxfail=1 -q --cov=services --cov-fail-under=90

      - name: Upload coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
  docker-build-push:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set Docker image tag
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "MESSAGING_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/globetalk-messaging:$SHORT_SHA" >> $GITHUB_ENV
          echo "MESSAGING_IMAGE_LATEST=${{ secrets.DOCKER_HUB_USERNAME }}/globetalk-messaging:latest" >> $GITHUB_ENV

      - name: Build & Push Frontend
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t $MESSAGING_IMAGE \
            -f services/messaging/messaging.Dockerfile \
            services/messaging/.
          docker push $MESSAGING_IMAGE
